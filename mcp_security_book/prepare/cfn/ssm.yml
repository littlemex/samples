Description: SSM Document for code-server instance

Parameters:
  CodeServerUser:
    Type: String
    Description: UserName for code-server
  HomeFolder:
    Type: String
    Description: Folder to open in code-server
  DevServerBasePath:
    Type: String
    Description: Base path for the application to be added to Nginx sites-available list
  DevServerPort:
    Type: Number
    Description: Port for the DevServer
  RepoUrl:
    Description: Remote repo URL to clone. To not clone a remote repo, leave blank
    Type: String

Resources:
  CodeServerSSMDoc:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap code-server instance
        parameters:
          CodeServerPassword:
            type: String
            default: !Ref AWS::StackId
        # all mainSteps scripts are in in /var/lib/amazon/ssm/<instanceid>/document/orchestration/<uuid>/<StepName>/_script.sh
        mainSteps:
          - name: InstallCloudWatchAgent
            action: aws:configurePackage
            inputs:
              name: AmazonCloudWatchAgent
              action: Install
          - name: ConfigureCloudWatchAgent
            action: aws:runDocument
            inputs:
              documentType: SSMDocument
              documentPath: AmazonCloudWatch-ManageAgent
              documentParameters:
                action: configure
                mode: ec2
                optionalConfigurationSource: default
                optionalRestart: 'yes'
          - name: InstallAptPackagesApt
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - dpkg --configure -a
                - apt-get -q update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q apt-utils
                - apt-get -q update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q needrestart unattended-upgrades
                - sed -i 's/#$nrconf{kernelhints} = -1;/$nrconf{kernelhints} = 0;/' /etc/needrestart/needrestart.conf
                - sed -i 's/#$nrconf{verbosity} = 2;/$nrconf{verbosity} = 0;/' /etc/needrestart/needrestart.conf
                - sed -i "s/#\$nrconf{restart} = 'i';/\$nrconf{restart} = 'a';/" /etc/needrestart/needrestart.conf
                - echo "Apt helper packages added. Checking configuration"
                - cat /etc/needrestart/needrestart.conf
          - name: InstallBasePackagesApt
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - dpkg --configure -a
                - apt-get -q update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q curl gnupg whois argon2 unzip nginx openssl locales locales-all apt-transport-https ca-certificates software-properties-common python3-pip nodejs npm graphviz
          - name: AddUserApt
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - dpkg --configure -a
                - !Sub |
                  if [[ "${CodeServerUser}" == "ubuntu" ]]
                  then
                    echo 'Using existing user: ${CodeServerUser}'
                  else
                    echo 'Adding user: ${CodeServerUser}'
                    adduser --disabled-password --gecos '' ${CodeServerUser}
                    echo "${CodeServerUser}:{{ CodeServerPassword }}" | chpasswd
                    usermod -aG sudo ${CodeServerUser}
                  fi
                - !Sub |
                  tee /etc/sudoers.d/91-vscode-user <<EOF
                  ${CodeServerUser} ALL=(ALL) NOPASSWD:ALL
                  EOF
                - !Sub mkdir -p /home/${CodeServerUser} && chown -R ${CodeServerUser}:${CodeServerUser} /home/${CodeServerUser}
                - !Sub mkdir -p /home/${CodeServerUser}/.local/bin && chown -R ${CodeServerUser}:${CodeServerUser} /home/${CodeServerUser}
                - echo "User added. Checking configuration"
                - !Sub getent passwd ${CodeServerUser}
          - name: UpdateProfile
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - echo LANG=en_US.utf-8 >> /etc/environment
                - echo LC_ALL=en_US.UTF-8 >> /etc/environment
                - !Sub echo 'PATH=$PATH:/home/${CodeServerUser}/.local/bin' >> /home/${CodeServerUser}/.bashrc
                - !Sub echo 'export PATH' >> /home/${CodeServerUser}/.bashrc
                - !Sub echo 'export AWS_REGION=${AWS::Region}' >> /home/${CodeServerUser}/.bashrc
                - !Sub echo 'export AWS_ACCOUNTID=${AWS::AccountId}' >> /home/${CodeServerUser}/.bashrc
                - !Sub echo 'export NEXT_TELEMETRY_DISABLED=1' >> /home/${CodeServerUser}/.bashrc
                - !Sub echo "export PS1='\[\033[01;32m\]\u:\[\033[01;34m\]\w\[\033[00m\]\$ '" >> /home/${CodeServerUser}/.bashrc
                - !Sub chown -R ${CodeServerUser}:${CodeServerUser} /home/${CodeServerUser}
          - name: InstallAWSCLI
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - mkdir -p /tmp
                - curl -fsSL https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip -o /tmp/aws-cli.zip
                - !Sub chown -R ${CodeServerUser}:${CodeServerUser} /tmp/aws-cli.zip
                - unzip -q -d /tmp /tmp/aws-cli.zip
                - sudo /tmp/aws/install
                - rm -rf /tmp/aws
                - echo "AWS CLI installed. Checking configuration"
                - aws --version
          - name: InstallGitApt
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - dpkg --configure -a
                - add-apt-repository ppa:git-core/ppa
                - apt-get -q update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q git
                - !Sub sudo -u ${CodeServerUser} git config --global user.email "coder@example.com"
                - !Sub sudo -u ${CodeServerUser} git config --global user.name "Workshop Coder"
                - !Sub sudo -u ${CodeServerUser} git config --global init.defaultBranch "main"
                - echo "Git installed. Checking configuration"
                - git --version
          - name: CloneRepo
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 600
              runCommand:
                - '#!/bin/bash'
                - !Sub |
                  if [[ -z "${RepoUrl}" ]]
                  then
                    echo "No Repo"
                  else
                    mkdir -p ${HomeFolder} && chown -R ${CodeServerUser}:${CodeServerUser} ${HomeFolder}
                    sudo -u ${CodeServerUser} git clone ${RepoUrl} ${HomeFolder}
                    echo "Repo ${RepoUrl} cloned. Checking configuration"
                    ls -la ${HomeFolder}
                    sudo -u ${CodeServerUser} git -C ${HomeFolder} remote -v
                  fi

          - name: ConfigureCodeServer
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 600
              runCommand:
                - '#!/bin/bash'
                - !Sub export HOME=/home/${CodeServerUser}
                - curl -fsSL https://code-server.dev/install.sh | bash -s -- 2>&1
                - !Sub systemctl enable --now code-server@${CodeServerUser} 2>&1
                - !Sub |
                  tee /etc/nginx/conf.d/code-server.conf <<EOF
                  server {
                      listen 80;
                      listen [::]:80;
                      # server_name \$\{CloudFrontDistribution.DomainName\};
                      server_name *.cloudfront.net;
                      location / {
                        proxy_pass http://localhost:8080/;
                        proxy_set_header Host \$host;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection upgrade;
                        proxy_set_header Accept-Encoding gzip;
                      }
                      location /${DevServerBasePath} {
                        proxy_pass http://localhost:${DevServerPort}/${DevServerBasePath};
                        proxy_set_header Host \$host;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection upgrade;
                        proxy_set_header Accept-Encoding gzip;
                      }
                      location /proxy/13000/ {
                        proxy_pass http://localhost:13000/;
                        proxy_set_header Host \$host;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection upgrade;
                        proxy_set_header Accept-Encoding gzip;
                        proxy_set_header Origin https://\$host;
                        proxy_set_header X-Forwarded-For \$remote_addr;
                        proxy_http_version 1.1;
                      }
                      location /proxy/3000/ {
                        proxy_pass http://localhost:3000/;
                        proxy_set_header Host \$host;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection upgrade;
                        proxy_set_header Accept-Encoding gzip;
                        proxy_set_header Origin https://\$host;
                        proxy_set_header X-Forwarded-For \$remote_addr;
                        proxy_http_version 1.1;
                      }
                      location /proxy/23000/ {
                        proxy_pass http://localhost:23000/;
                        proxy_set_header Host \$host;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection upgrade;
                        proxy_set_header Accept-Encoding gzip;
                        proxy_set_header Origin https://\$host;
                        proxy_set_header X-Forwarded-For \$remote_addr;
                        proxy_http_version 1.1;
                      }
                      location /proxy/8000/ {
                        proxy_pass http://localhost:8000/;
                        proxy_set_header Host \$host;
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection upgrade;
                        proxy_set_header Accept-Encoding gzip;
                        proxy_set_header Origin https://\$host;
                        proxy_set_header X-Forwarded-For \$remote_addr;
                        proxy_http_version 1.1;
                      }
                  }
                  EOF
                - !Sub mkdir -p /home/${CodeServerUser}/.config/code-server
                - !Sub |
                  tee /home/${CodeServerUser}/.config/code-server/config.yaml <<EOF
                  cert: false
                  auth: password
                  hashed-password: "$(echo -n {{ CodeServerPassword }} | argon2 $(openssl rand -base64 12) -e)"
                  EOF
                - !Sub mkdir -p /home/${CodeServerUser}/.local/share/code-server/User/
                - !Sub touch /home/${CodeServerUser}/.hushlogin
                - !Sub mkdir -p ${HomeFolder} && chown -R ${CodeServerUser}:${CodeServerUser} ${HomeFolder}
                - !Sub |
                  tee /home/${CodeServerUser}/.local/share/code-server/User/settings.json <<EOF
                  {
                    "extensions.autoUpdate": false,
                    "extensions.autoCheckUpdates": false,
                    "telemetry.telemetryLevel": "off",
                    "security.workspace.trust.startupPrompt": "never",
                    "security.workspace.trust.enabled": false,
                    "security.workspace.trust.banner": "never",
                    "security.workspace.trust.emptyWindow": false,
                    "auto-run-command.rules": [
                      {
                        "command": "workbench.action.terminal.new"
                      }
                    ]
                  }
                  EOF
                - !Sub chown -R ${CodeServerUser}:${CodeServerUser} /home/${CodeServerUser}
                - !Sub systemctl restart code-server@${CodeServerUser}
                - systemctl restart nginx
                - !Sub sudo -u ${CodeServerUser} --login code-server --install-extension AmazonWebServices.aws-toolkit-vscode --force
                - !Sub sudo -u ${CodeServerUser} --login code-server --install-extension saoudrizwan.claude-dev --force
                - !Sub sudo -u ${CodeServerUser} --login code-server --install-extension ms-vscode.live-server --force
                - !Sub sudo -u ${CodeServerUser} --login code-server --install-extension synedra.auto-run-command --force
                - !Sub chown -R ${CodeServerUser}:${CodeServerUser} /home/${CodeServerUser}
                - echo "Nginx installed. Checking configuration"
                - nginx -t 2>&1
                - systemctl status nginx
                - echo "CodeServer installed. Checking configuration"
                - code-server -v
                - !Sub systemctl status code-server@${CodeServerUser}

          - name: SetupCodeCommand
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - |
                  cat > /usr/local/bin/code << EOF
                  #!/bin/bash
                  if [ "\$1" = "." ]; then
                    current_dir=\$(pwd)
                    /usr/bin/code-server \$current_dir
                  elif [ -n "\$1" ]; then
                    target=\$(realpath "\$1" 2>/dev/null || echo "\$1")
                    /usr/bin/code-server \$target
                  fi
                  EOF
                - chmod +x /usr/local/bin/code
          # Install optional packages here - any of these blocks can be deleted if that software is not required for the workshop
          - name: InstallNodeApt
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - apt-get update && apt-get install -y nodejs npm
                - npm install -g n
                - n 22
                - export PATH="/usr/local/bin:$PATH"
                - npm install -g npm@latest
                - echo "Node and npm installed. Checking configuration"
                - node -v
                - npm -v
          - name: Installuv
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 600
              runCommand:
                - '#!/bin/bash'
                - !Sub sudo -u ${CodeServerUser} --login curl -fsSL https://astral.sh/uv/install.sh -o /tmp/uv_install.sh
                - !Sub sudo -u ${CodeServerUser} --login bash /tmp/uv_install.sh
                - !Sub |
                  if uv generate-shell-completion bash &>/dev/null; then
                    echo 'eval "$(uv generate-shell-completion bash)"' >> /home/${CodeServerUser}/.bashrc
                  fi
                - !Sub |
                  if uvx generate-shell-completion bash &>/dev/null; then
                    echo 'eval "$(uvx generate-shell-completion bash)"' >> /home/${CodeServerUser}/.bashrc
                  fi
                - echo "uv installed. Checking configuration"
                - !Sub sudo -u ${CodeServerUser} --login uv --version
          - name: InstallDockerApt
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - dpkg --configure -a
                # - curl -fsSL https://get.docker.com | bash
                - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                - echo "deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release --codename --short) stable" > /etc/apt/sources.list.d/docker.list
                - apt-get -q update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q docker-ce docker-ce-cli containerd.io
                - !Sub usermod -aG docker ${CodeServerUser}
                - !Sub sudo -u ${CodeServerUser} newgrp docker
                - !Sub systemctl restart code-server@${CodeServerUser}
                - systemctl start docker.service
                - !Sub sudo -u ${CodeServerUser} --login code-server --install-extension ms-azuretools.vscode-docker --force
                - echo "Docker installed. Checking configuration"
                - docker --version
                - systemctl status docker.service

Outputs:
  CodeServerSSMDocName:
    Description: SSM Document name
    Value: !Ref CodeServerSSMDoc
