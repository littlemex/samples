Description: Create a vscode-server instance with an Amazon CloudFront distribution for use in Workshop Studio. Version 5.1.1
Parameters:
  VSCodeServerUser:
    Type: String
    Description: UserName for vscode-server
    Default: coder
  InstanceName:
    Type: String
    Description: VSCode-server EC2 instance name
    Default: VSCodeServer
  InstanceVolumeSize:
    Type: Number
    Description: VSCode-server EC2 instance volume size in GB
    Default: 40
  InstanceType:
    Description: VSCode-server EC2 instance type
    Type: String
    Default: c7i.4xlarge
  InstanceOperatingSystem:
    Description: VSCode-server EC2 operating system
    Type: String
    Default: Ubuntu-22
    AllowedValues: ['Ubuntu-22', 'Ubuntu-24']
  HomeFolder:
    Type: String
    Description: Folder to open in vscode-server
    Default: /work
  DevServerBasePath:
    Type: String
    Description: Base path for the application to be added to Nginx sites-available list
    Default: app
  DevServerPort:
    Type: Number
    Description: Port for the DevServer
    Default: 8081
  RepoUrl:
    Description: Remote repo URL to clone. To not clone a remote repo, leave blank
    Type: String
    Default: 'https://github.com/littlemex/samples.git'
  InspectorPort:
    Type: Number
    Default: 6274
    Description: Port for MCP Inspector UI
  AppPort:
    Type: Number
    Default: 8000
    Description: Port for additional application

Conditions:
  IsGraviton:
    !Not [
      !Equals [
        !Select [0, !Split ['g', !Select [0, !Split ['.', !Ref InstanceType]]]],
        !Select [0, !Split ['.', !Ref InstanceType]],
      ],
    ]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Instance Configuration
        Parameters:
          - InstanceName
          - InstanceVolumeSize
          - InstanceType
          - InstanceOperatingSystem
      - Label:
          default: VSCode-server Configuration
        Parameters:
          - VSCodeServerUser
          - HomeFolder
          - DevServerBasePath
          - DevServerPort
          - InspectorPort
          - AppPort
          - RepoUrl
    ParameterLabels:
      VSCodeServerUser:
        default: VSCode-server user name
      InstanceName:
        default: Instance name
      InstanceVolumeSize:
        default: Instance volume size
      InstanceType:
        default: Instance type
      InstanceOperatingSystem:
        default: Instance operating system
      HomeFolder:
        default: VSCode-server home folder
      DevServerBasePath:
        default: Application base path
      DevServerPort:
        default: Application port
      InspectorPort:
        default: MCP Inspector port
      AppPort:
        default: Additional application port
      RepoUrl:
        default: Git repo URL

Mappings:
  ArmImage:
    Ubuntu-22:
      ImageId: '{{resolve:ssm:/aws/service/canonical/ubuntu/server/jammy/stable/current/arm64/hvm/ebs-gp2/ami-id}}'
    Ubuntu-24:
      ImageId: '{{resolve:ssm:/aws/service/canonical/ubuntu/server/noble/stable/current/arm64/hvm/ebs-gp3/ami-id}}'
  AmdImage:
    Ubuntu-22:
      ImageId: '{{resolve:ssm:/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id}}'
    Ubuntu-24:
      ImageId: '{{resolve:ssm:/aws/service/canonical/ubuntu/server/noble/stable/current/amd64/hvm/ebs-gp3/ami-id}}'
  AWSRegionsPrefixListID:
    ap-northeast-1:
      PrefixList: pl-58a04531
    ap-northeast-2:
      PrefixList: pl-22a6434b
    ap-south-1:
      PrefixList: pl-9aa247f3
    ap-southeast-1:
      PrefixList: pl-31a34658
    ap-southeast-2:
      PrefixList: pl-b8a742d1
    ca-central-1:
      PrefixList: pl-38a64351
    eu-central-1:
      PrefixList: pl-a3a144ca
    eu-north-1:
      PrefixList: pl-fab65393
    eu-west-1:
      PrefixList: pl-4fa04526
    eu-west-2:
      PrefixList: pl-93a247fa
    eu-west-3:
      PrefixList: pl-75b1541c
    sa-east-1:
      PrefixList: pl-5da64334
    us-east-1:
      PrefixList: pl-3b927c52
    us-east-2:
      PrefixList: pl-b6a144df
    us-west-1:
      PrefixList: pl-4ea04527
    us-west-2:
      PrefixList: pl-82a045eb

Resources:
  VSCodeServerSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: !Sub
        - '${InstanceName}-${RandomGUID}'
        - RandomGUID: !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      Description: VSCode-server user details
      GenerateSecretString:
        PasswordLength: 16
        SecretStringTemplate: !Sub '{"username":"${VSCodeServerUser}"}'
        GenerateStringKey: 'password'
        ExcludePunctuation: true

  SecretPlaintextLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub lambda.${AWS::URLSuffix}
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AwsSecretsManagerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref VSCodeServerSecret

  SecretPlaintextLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Return the value of the secret
      Handler: index.lambda_handler
      Runtime: python3.13
      MemorySize: 128
      Timeout: 10
      Architectures:
        - x86_64
      Role: !GetAtt SecretPlaintextLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              logger.info(f'Event: {json.dumps(event)}')
              try:
                  if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData={}, reason='No action to take')
                      return
                  
                  secret_name = event['ResourceProperties']['SecretArn']
                  logger.info(f'Getting secret from {secret_name}')
                  
                  secrets_mgr = boto3.client('secretsmanager')
                  secret = secrets_mgr.get_secret_value(SecretId=secret_name)
                  secret_value = secret['SecretString']
                  
                  try:
                      responseData = json.loads(secret_value)
                  except json.JSONDecodeError:
                      responseData = {'secret': secret_value}
                  
                  logger.info('Successfully retrieved secret')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData=responseData, reason='OK', noEcho=True)
              except Exception as e:
                  logger.error(f'Error: {str(e)}')
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData={}, reason=str(e))

  SecretPlaintext:
    Type: Custom::SecretPlaintextLambda
    Properties:
      ServiceToken: !GetAtt SecretPlaintextLambda.Arn
      ServiceTimeout: 30
      SecretArn: !Ref VSCodeServerSecret

  VSCodeServerSSMDoc:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap vscode-server instance
        parameters:
          VSCodeServerPassword:
            type: String
            default: !Ref AWS::StackId
        mainSteps:
          - name: InstallCloudWatchAgent
            action: aws:configurePackage
            inputs:
              name: AmazonCloudWatchAgent
              action: Install
          - name: ConfigureCloudWatchAgent
            action: aws:runDocument
            inputs:
              documentType: SSMDocument
              documentPath: AmazonCloudWatch-ManageAgent
              documentParameters:
                action: configure
                mode: ec2
                optionalConfigurationSource: default
                optionalRestart: 'yes'
          - name: InstallPackages
            action: aws:runShellScript
            precondition:
              StringEquals:
                - platformType
                - Linux
            inputs:
              timeoutSeconds: 600
              runCommand:
                - '#!/bin/bash'
                - dpkg --configure -a
                - apt-get -q update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q curl gnupg unzip nginx openssl python3-pip nodejs npm snapd
                - systemctl enable --now snapd
                - sleep 30
                - ln -sf /var/lib/snapd/snap /snap
          - name: AddUser
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - !Sub |
                  if [[ "${VSCodeServerUser}" == "ubuntu" ]]; then
                    echo 'Using existing user: ${VSCodeServerUser}'
                  else
                    adduser --disabled-password --gecos '' ${VSCodeServerUser}
                    echo "${VSCodeServerUser}:{{ VSCodeServerPassword }}" | chpasswd
                    usermod -aG sudo ${VSCodeServerUser}
                  fi
                - !Sub |
                  tee /etc/sudoers.d/91-vscode-user <<EOF
                  ${VSCodeServerUser} ALL=(ALL) NOPASSWD:ALL
                  EOF
                - !Sub mkdir -p /home/${VSCodeServerUser} && chown -R ${VSCodeServerUser}:${VSCodeServerUser} /home/${VSCodeServerUser}
          - name: UpdateProfile
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - echo LANG=en_US.utf-8 >> /etc/environment
                - echo LC_ALL=en_US.UTF-8 >> /etc/environment
                - !Sub echo 'export AWS_REGION=${AWS::Region}' >> /home/${VSCodeServerUser}/.bashrc
                - !Sub echo 'export AWS_ACCOUNTID=${AWS::AccountId}' >> /home/${VSCodeServerUser}/.bashrc
                - !Sub chown -R ${VSCodeServerUser}:${VSCodeServerUser} /home/${VSCodeServerUser}
          - name: InstallAWSCLI
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - curl -fsSL https://awscli.amazonaws.com/awscli-exe-linux-$(uname -m).zip -o /tmp/aws-cli.zip
                - unzip -q -d /tmp /tmp/aws-cli.zip
                - /tmp/aws/install
                - rm -rf /tmp/aws
          - name: InstallSessionManagerPlugin
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - curl -fsSL https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb -o /tmp/session-manager-plugin.deb
                - dpkg -i /tmp/session-manager-plugin.deb
                - rm -f /tmp/session-manager-plugin.deb
          - name: InstallGit
            action: aws:runShellScript
            precondition:
              StringEquals:
                - platformType
                - Linux
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - add-apt-repository ppa:git-core/ppa -y
                - apt-get -q update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q git
                - !Sub sudo -u ${VSCodeServerUser} git config --global user.email "coder@example.com"
                - !Sub sudo -u ${VSCodeServerUser} git config --global user.name "Workshop coder"
                - !Sub sudo -u ${VSCodeServerUser} git config --global init.defaultBranch "main"
          - name: CloneRepo
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 600
              runCommand:
                - '#!/bin/bash'
                - !Sub |
                  if [[ -z "${RepoUrl}" ]]; then
                    echo "No Repo"
                  else
                    mkdir -p ${HomeFolder} && chown -R ${VSCodeServerUser}:${VSCodeServerUser} ${HomeFolder}
                    sudo -u ${VSCodeServerUser} git clone ${RepoUrl} ${HomeFolder}
                  fi
          - name: ConfigureVSCodeServer
            action: aws:runShellScript
            inputs:
              timeoutSeconds: 600
              runCommand:
                - '#!/bin/bash'
                - snap install --classic code
                - sleep 30
                - ln -sf /snap/bin/code /usr/local/bin/code
                - !Sub |
                  cat > /etc/systemd/system/vscode-server.service << 'EOF'
                  [Unit]
                  Description=VS Code Server Service
                  After=network.target snapd.service
                  
                  [Service]
                  Type=simple
                  User=${VSCodeServerUser}
                  Group=${VSCodeServerUser}
                  Environment="HOME=/home/${VSCodeServerUser}"
                  Environment="SHELL=/bin/bash"
                  Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
                  WorkingDirectory=${HomeFolder}
                  Restart=always
                  RestartSec=10
                  ExecStart=/snap/bin/code serve-web --connection-token {{ VSCodeServerPassword }} --accept-server-license-terms --host 0.0.0.0 --port 8080 --without-connection-token
                  
                  [Install]
                  WantedBy=multi-user.target
                  EOF
                - !Sub mkdir -p /home/${VSCodeServerUser}/.config
                - !Sub chown -R ${VSCodeServerUser}:${VSCodeServerUser} /home/${VSCodeServerUser}/.config
                - !Sub mkdir -p ${HomeFolder}
                - !Sub chown -R ${VSCodeServerUser}:${VSCodeServerUser} ${HomeFolder}
                - systemctl daemon-reload
                - systemctl enable vscode-server
                - systemctl start vscode-server
                - sleep 10
                - systemctl status vscode-server
          - name: ConfigureNginx
            action: aws:runShellScript
            precondition:
              StringEquals:
                - platformType
                - Linux
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - |
                  cat > /etc/nginx/sites-available/vscode << 'EOF'
                  server {
                      listen 80 default_server;
                      listen [::]:80 default_server;
                      server_name _;
                      
                      # 静的ファイル用の設定
                      location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map)$ {
                          proxy_pass http://127.0.0.1:8080;
                          proxy_set_header Host $host;
                          proxy_set_header X-Real-IP $remote_addr;
                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto $scheme;
                          expires 1y;
                          add_header Cache-Control "public, immutable";
                          proxy_buffering on;
                          proxy_cache_valid 200 1y;
                      }
                      
                      # assets ディレクトリ用の設定
                      location /assets/ {
                          proxy_pass http://127.0.0.1:8080;
                          proxy_set_header Host $host;
                          proxy_set_header X-Real-IP $remote_addr;
                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto $scheme;
                          expires 1y;
                          add_header Cache-Control "public, immutable";
                          proxy_buffering on;
                      }
                      
                      # MCP Inspector用の設定
                      location /inspector/ {
                          proxy_pass http://127.0.0.1:6274/;
                          proxy_http_version 1.1;
                          proxy_set_header Upgrade $http_upgrade;
                          proxy_set_header Connection 'upgrade';
                          proxy_set_header Host $host;
                          proxy_set_header X-Real-IP $remote_addr;
                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto $scheme;
                          proxy_cache_bypass $http_upgrade;
                          proxy_read_timeout 86400;
                          proxy_connect_timeout 60;
                          proxy_send_timeout 60;
                      }
                      
                      # VS Code CDN用のプロキシ設定
                      location /vscode-cdn/ {
                          proxy_pass https://main.vscode-cdn.net/;
                          proxy_set_header Host main.vscode-cdn.net;
                          proxy_set_header X-Real-IP $remote_addr;
                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto $scheme;
                          proxy_ssl_server_name on;
                          proxy_ssl_verify off;
                          
                          # CORSヘッダーを追加
                          add_header Access-Control-Allow-Origin *;
                          add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                          add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
                          
                          # プリフライトリクエスト対応
                          if ($request_method = 'OPTIONS') {
                              add_header Access-Control-Allow-Origin *;
                              add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                              add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
                              add_header Access-Control-Max-Age 1728000;
                              add_header Content-Type 'text/plain; charset=utf-8';
                              add_header Content-Length 0;
                              return 204;
                          }
                      }
                      
                      # App用の設定
                      location /app/ {
                          proxy_pass http://127.0.0.1:8000/;
                          proxy_http_version 1.1;
                          proxy_set_header Upgrade $http_upgrade;
                          proxy_set_header Connection 'upgrade';
                          proxy_set_header Host $host;
                          proxy_set_header X-Real-IP $remote_addr;
                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto $scheme;
                          proxy_cache_bypass $http_upgrade;
                          proxy_read_timeout 86400;
                          proxy_connect_timeout 60;
                          proxy_send_timeout 60;
                      }
                      
                      # メインアプリケーション用の設定
                      location / {
                          proxy_pass http://127.0.0.1:8080;
                          proxy_http_version 1.1;
                          proxy_set_header Upgrade $http_upgrade;
                          proxy_set_header Connection 'upgrade';
                          proxy_set_header Host $host;
                          proxy_set_header X-Real-IP $remote_addr;
                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                          proxy_set_header X-Forwarded-Proto $scheme;
                          proxy_cache_bypass $http_upgrade;
                          proxy_read_timeout 86400;
                          proxy_connect_timeout 60;
                          proxy_send_timeout 60;
                      }
                  }
                  EOF
                - rm -f /etc/nginx/sites-enabled/default
                - ln -sf /etc/nginx/sites-available/vscode /etc/nginx/sites-enabled/vscode
                - /usr/sbin/nginx -t
                - systemctl restart nginx
                - systemctl enable nginx
                - sleep 5
                - systemctl status nginx
          - name: Installuv
            action: aws:runShellScript
            precondition:
              StringEquals:
                - platformType
                - Linux
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - !Sub sudo -u ${VSCodeServerUser} --login curl -fsSL https://astral.sh/uv/install.sh -o /tmp/uv_install.sh
                - !Sub sudo -u ${VSCodeServerUser} --login bash /tmp/uv_install.sh
                - !Sub echo 'eval "$(uv generate-shell-completion bash)"' >> /home/${VSCodeServerUser}/.bashrc || true
          - name: InstallDocker
            action: aws:runShellScript
            precondition:
              StringEquals:
                - platformType
                - Linux
            inputs:
              timeoutSeconds: 300
              runCommand:
                - '#!/bin/bash'
                - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                - echo "deb [signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release --codename --short) stable" > /etc/apt/sources.list.d/docker.list
                - apt-get -q update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q docker-ce docker-ce-cli containerd.io
                - !Sub usermod -aG docker ${VSCodeServerUser}
                - systemctl start docker.service

  SSMDocLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub lambda.${AWS::URLSuffix}
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMDocOnEC2Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${VSCodeServerSSMDoc}
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/AmazonCloudWatch-ManageAgent
                  - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/${VSCodeServerInstance}
              - Effect: Allow
                Action:
                  - ssm:ListCommandInvocations
                  - ssm:GetCommandInvocation
                Resource: '*'

  RunSSMDocLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Run SSM document on EC2 instance
      Handler: index.lambda_handler
      Runtime: python3.13
      MemorySize: 128
      Timeout: 900
      Environment:
        Variables:
          RetrySleep: 2900
          AbortTimeRemaining: 3200
      Architectures:
        - x86_64
      Role: !GetAtt SSMDocLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import time
          import os
          import json
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              logger.info(f'Event: {json.dumps(event)}')
              try:
                  if event['RequestType'] != 'Create':
                      logger.info('Not a Create request, returning success')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData={}, reason='No action to take')
                      return
                  
                  sleep_ms = int(os.environ.get('RetrySleep', '2900'))
                  abort_time_remaining_ms = int(os.environ.get('AbortTimeRemaining', '3200'))
                  
                  resource_properties = event['ResourceProperties'].copy()
                  instance_id = resource_properties['InstanceId']
                  document_name = resource_properties['DocumentName']
                  cloudwatch_log_group_name = resource_properties['CloudWatchLogGroupName']
                  
                  logger.info(f'Running SSM Document {document_name} on instance {instance_id}')
                  
                  # Clean up resource properties
                  for key in ['ServiceToken', 'ServiceTimeout', 'InstanceId', 'DocumentName', 'CloudWatchLogGroupName', 'PhysicalResourceId']:
                      resource_properties.pop(key, None)
                  
                  # Convert to SSM parameters format
                  parameters = {}
                  for key, value in resource_properties.items():
                      parameters[key] = [str(value)]
                  
                  logger.info(f'Parameters: {parameters}')
                  
                  ssm = boto3.client('ssm')
                  retry = True
                  attempt_no = 0
                  
                  while retry and attempt_no < 10:
                      attempt_no += 1
                      time_remaining_ms = context.get_remaining_time_in_millis()
                      logger.info(f'Attempt {attempt_no}, time remaining: {time_remaining_ms}ms')
                      
                      try:
                          response = ssm.send_command(
                              InstanceIds=[instance_id],
                              DocumentName=document_name,
                              CloudWatchOutputConfig={
                                  'CloudWatchLogGroupName': cloudwatch_log_group_name,
                                  'CloudWatchOutputEnabled': True
                              },
                              Parameters=parameters
                          )
                          
                          command_id = response['Command']['CommandId']
                          logger.info(f'Command sent successfully: {command_id}')
                          
                          responseData = {'CommandId': command_id}
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, reason='OK')
                          return
                          
                      except ssm.exceptions.InvalidInstanceId as e:
                          logger.warning(f'Instance not ready: {str(e)}')
                          if time_remaining_ms > abort_time_remaining_ms:
                              logger.info(f'Sleeping for {sleep_ms/1000}s')
                              time.sleep(sleep_ms / 1000)
                          else:
                              logger.error('Timed out waiting for instance')
                              cfnresponse.send(event, context, cfnresponse.FAILED, responseData={}, reason='Timed out waiting for instance')
                              return
                      except Exception as e:
                          logger.error(f'Unexpected error: {str(e)}')
                          cfnresponse.send(event, context, cfnresponse.FAILED, responseData={}, reason=str(e))
                          return
                  
                  # If we get here, we've exceeded max attempts
                  logger.error('Exceeded maximum retry attempts')
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData={}, reason='Exceeded maximum retry attempts')
                  
              except Exception as e:
                  logger.error(f'Lambda handler error: {str(e)}')
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData={}, reason=str(e))

  RunVSCodeServerSSMDoc:
    Type: Custom::RunSSMDocLambda
    Properties:
      ServiceToken: !GetAtt RunSSMDocLambda.Arn
      ServiceTimeout: 305
      InstanceId: !Ref VSCodeServerInstance
      DocumentName: !Ref VSCodeServerSSMDoc
      CloudWatchLogGroupName: !Sub /aws/ssm/${VSCodeServerSSMDoc}
      VSCodeServerPassword: !GetAtt SecretPlaintext.password

  VSCodeServerInstanceBootstrapRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub ec2.${AWS::URLSuffix}
                - !Sub ssm.${AWS::URLSuffix}
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonQDeveloperAccess

  VSCodeServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref VSCodeServerInstanceBootstrapRole

  VSCodeServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !If
        - IsGraviton
        - !FindInMap [ArmImage, !Ref InstanceOperatingSystem, ImageId]
        - !FindInMap [AmdImage, !Ref InstanceOperatingSystem, ImageId]
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref InstanceVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
      Monitoring: true
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref VSCodeServerInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          hostname: ${InstanceName}
          runcmd:
            - mkdir -p ${HomeFolder} && chown -R ${VSCodeServerUser}:${VSCodeServerUser} ${HomeFolder}
      Tags:
        - Key: Name
          Value: !Ref InstanceName

  # 静的ファイル用のキャッシュポリシー
  VSCodeServerStaticCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Sub
          - ${InstanceName}-static-${RandomGUID}
          - RandomGUID:
              !Select [0,
                !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]],
              ]
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: True
          EnableAcceptEncodingBrotli: True
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Origin
          QueryStringsConfig:
            QueryStringBehavior: none

  VSCodeServerInstanceCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Sub
          - ${InstanceName}-${RandomGUID}
          - RandomGUID:
              !Select [0,
                !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]],
              ]
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingGzip: False
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Accept-Charset
              - Authorization
              - Origin
              - Accept
              - Referer
              - Host
              - Accept-Language
              - Accept-Encoding
              - Accept-Datetime
          QueryStringsConfig:
            QueryStringBehavior: all

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: True
        HttpVersion: http2and3
        CacheBehaviors:
          # 静的ファイル用のキャッシュビヘイビア
          - AllowedMethods:
              - GET
              - HEAD
            CachePolicyId: !Ref VSCodeServerStaticCachePolicy
            Compress: True
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: '/assets/*'
          # MCP Inspector用のキャッシュビヘイビア
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            Compress: False
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: allow-all
            PathPattern: '/inspector/*'
          # VS Code CDN用のキャッシュビヘイビア
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachePolicyId: !Ref VSCodeServerStaticCachePolicy
            Compress: True
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: '/vscode-cdn/*'
          # App用のキャッシュビヘイビア
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            Compress: False
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: allow-all
            PathPattern: '/app/*'
          # 静的ファイル拡張子用のキャッシュビヘイビア
          - AllowedMethods:
              - GET
              - HEAD
            CachePolicyId: !Ref VSCodeServerStaticCachePolicy
            Compress: True
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: '*.js'
          - AllowedMethods:
              - GET
              - HEAD
            CachePolicyId: !Ref VSCodeServerStaticCachePolicy
            Compress: True
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: '*.css'
          # プロキシ用のキャッシュビヘイビア
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            Compress: False
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: allow-all
            PathPattern: '/proxy/*'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: !Ref VSCodeServerInstanceCachePolicy
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
          TargetOriginId: !Sub CloudFront-${AWS::StackName}
          ViewerProtocolPolicy: allow-all
        Origins:
          - DomainName: !GetAtt VSCodeServerInstance.PublicDnsName
            Id: !Sub CloudFront-${AWS::StackName}
            CustomOriginConfig:
              OriginProtocolPolicy: http-only

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for vscode-server - only allow CloudFront ingress
      SecurityGroupIngress:
        - Description: Allow HTTP from com.amazonaws.global.cloudfront.origin-facing
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId:
            !FindInMap [AWSRegionsPrefixListID, !Ref 'AWS::Region', PrefixList]

Outputs:
  URL:
    Description: VSCode-server URL
    Value: !Sub https://${CloudFrontDistribution.DomainName}/?folder=${HomeFolder}
  Password:
    Description: VSCode-server Connection Token
    Value: !GetAtt SecretPlaintext.password